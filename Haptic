using System.Collections; // Libreria generica de unity
using System.Collections.Generic; // Libreria generica de unity
using UnityEngine; // Libreria generica de unity

public class PlayerCTRL : MonoBehaviour //Clase controladora del movimiento del jugador
{
    public Rigidbody2D playerBody; //Componente utilizado para controlar propiedades fisicas (velocidad, gravedad, masa, etc.)
    public Animator playerAnimator; //Componente utilizado para controlar las animaciones del jugador
    public SpriteRenderer playerSprite; //Componente utilizado para controlar el grafico 2D (sprite)
    public float xSpeed; //Velocidad del jugador en el eje X
    public float ySpeed; //Velocidad del jugador en el eje Y

    void Update() //Metodo que se llama 1 vez por frame durante el tiemp de ejecucion (hasta 60 veces por segundo)
    {
        HorizontalMovement(); //Lectura del movimiento del jugador en el eje X (Linea 19)
        VerticalMovement(); //Lectura del movimiento del jugador en el eje Y (Linea 34)
    }

    void HorizontalMovement(){ //Metodo que gestiona el movimiento del jugador en el eje X
        float hMovement = Input.GetAxisRaw("Horizontal"); //Lectura del valor de entrada en eje horizontal, puede retornar valores entre -1 y 1(teclado, joystick fisico y joystick virtual)

        if(hMovement > 0){ //Si la entrada del teclado/mando es mayor a 0 (Tecla D, Flecha derecha o Joystick a la derecha) ...
            playerBody.velocity = new Vector2(xSpeed, playerBody.velocity.y); // ... Sobreescribe la velocidad del eje x con la declarada para el jugador (Linea 10) y manten la velocidad del eje Y ...
            SpriteNAnimationManager(2,2); // ... Y gestiona las animaciones para una orientacion horizontal (2, ...), con direccion hacia la derecha (..., 2) - (Linea 49)
        }else if(hMovement < 0){ //O si la entrada del teclado/mando es menor a 0 (Tecla A, Flecha izquierda o Joystick a la izquierda) ...
            playerBody.velocity = new Vector2(-xSpeed, playerBody.velocity.y); // ... Sobreescribe la velocidad del eje x con la declarada para el jugador en valores negativos (Linea 10) y manten la velocidad del eje Y ...
            SpriteNAnimationManager(2,1); // ... Y gestiona las animaciones para una orientacion horizontal (2, ...), con direccion hacia la izquierda (..., 1) - (Linea 49)
        }else{ //O si la entrada del teclado/mando es 0 (sin entrada/valor) ...
            playerBody.velocity = new Vector2(0, playerBody.velocity.y); // ... Sobreescribe la velocidad del eje x con un 0 y manten la velocidad del eje Y (detiene el movimiento en X)...
            SpriteNAnimationManager(2, 0); // ... Y gestiona las animaciones para una orientacion horizontal (2, ...), sin direccion de movimiento (..., 0) - (Linea 49)
        }      
    }

    void VerticalMovement(){ //Metodo que gestiona el movimiento del jugador en el eje Y
        float vMovement = Input.GetAxisRaw("Vertical"); //Lectura del valor de entrada en eje vertical, puede retornar valores entre -1 y 1(teclado, joystick fisico y joystick virtual)

        if(vMovement > 0){ //Si la entrada del teclado/mando es mayor a 0 (Tecla W, Flecha superior o Joystick hacia arriba) ...
            playerBody.velocity = new Vector2(playerBody.velocity.x, ySpeed); // ... Sobreescribe la velocidad del eje y con la declarada para el jugador (Linea 11) y manten la velocidad del eje X ...
            SpriteNAnimationManager(1,1); // ... Y gestiona las animaciones para una orientacion vertical (1, ...), con direccion hacia arriba (..., 1) - (Linea 49)
        }else if(vMovement < 0){ //O si la entrada del teclado/mando es menor a 0 (Tecla S, Flecha inferior o Joystick hacia abajo) ...
            playerBody.velocity = new Vector2(playerBody.velocity.x, -ySpeed); // ... Sobreescribe la velocidad del eje y con la declarada para el jugador en valores negativos (Linea 11) y manten la velocidad del eje X ...
            SpriteNAnimationManager(1,2); // ... Y gestiona las animaciones para una orientacion vertical (1, ...), con direccion hacia abajo (..., 2) - (Linea 49)
        }  else{ //O si la entrada del teclado/mando es 0 (sin entrada/valor) ...
            playerBody.velocity = new Vector2(playerBody.velocity.x, 0); // ... Sobreescribe la velocidad del eje y con un 0 y manten la velocidad del eje X (detiene el movimiento en Y)...
            SpriteNAnimationManager(1, 0); // ... Y gestiona las animaciones para una orientacion vertical (1, ...), sin direccion de movimiento (..., 0) - (Linea 49)
        }            
    }

    void SpriteNAnimationManager(int orientation, int direction){ //Metodo que gestiona las animaciones del jugador y la orientacion del grafico 2D segun la orientacion y direccion del jugador
        switch(orientation){ //Casos donde se revisa la orientacion actual del jugador (vertical u vorizontal)
            case 1: //En caso de que la orientacion recibida sea 1, el jugador se esta moviendo de forma vertical ...
                playerAnimator.SetFloat("IsMovingVertical", 1); //Asi que envia el valor 1 al controlador de animaciones en el parameto "IsMovingVertical" ... 

                switch(direction){ //Casos donde se revisa la direccion de movimiento del jugador con orientacion vertical (arriba o abajo)
                    case 0: //En caso de que la direccion recibida sea 0, el jugador no se esta moviendo de forma vertical hacia ninguna direccion ...
                        playerAnimator.SetFloat("IsMovingVertical", direction); // ... Asi que envia el valor 0 al controlador de animaciones en el parameto "IsMovingVertical" ... 
                        playerAnimator.SetBool("IsUp", false); // ... Tambien establece en falso el parametro "IsUp" en el controlador de animaciones ...
                        playerAnimator.SetBool("IsDown", false); // ... Y establece en falso el parametro "IsDown" en el controlador de animaciones ...
                        break; //Break away del switch de direccion
                    case 1: //En caso de que la direccion recibida sea 1, el jugador se esta moviendo de forma vertical hacia arriba ...
                        playerAnimator.SetBool("IsUp", true); // ... Asi que establece en verdadero el parametro "IsUp" en el controlador de animaciones ...
                        playerAnimator.SetBool("IsDown", false); // ... Y establece en falso el parametro "IsDown" en el controlador de animaciones ...
                        break; //Break away del switch de direccion                 
                    case 2: //En caso de que la direccion recibida sea 2, el jugador se esta moviendo de forma vertical hacia abajo ...
                        playerAnimator.SetBool("IsUp", false); // ... Asi que establece en falso el parametro "IsUp" en el controlador de animaciones ...
                        playerAnimator.SetBool("IsDown", true); // ... Y establece en verdadero el parametro "IsDown" en el controlador de animaciones ...
                        break; //Break away del switch de direccion  
                }                
                break; //Break away del switch de orientacion  
            case 2: //En caso de que la orientacion recibida sea 2, el jugador se esta moviendo de forma horizontal ...
                playerAnimator.SetFloat("IsMovingHorizontal", 1); //Asi que envia el valor 1 al controlador de animaciones en el parameto "IsMovingHorizontal" ... 

                switch(direction){ //Casos donde se revisa la direccion de movimiento del jugador con orientacion horizontal (izquierda o derecha)
                    case 0: //En caso de que la direccion recibida sea 0, el jugador no se esta moviendo de forma horizontal hacia ninguna direccion...
                        playerAnimator.SetFloat("IsMovingHorizontal", direction); // ... Asi que envia el valor 0 al controlador de animaciones en el parameto "IsMovingHorizontal" ... 
                        break; //Break away del switch de direccion  
                    case 1: //En caso de que la direccion recibida sea 1, el jugador se esta moviendo de forma horizontal hacia la izquierda ...
                        playerSprite.flipX = true; // ... Asi que invierte la orientacion del grafico en 2D hacia la izquierda
                        break; //Break away del switch de direccion                       
                    case 2: //En caso de que la direccion recibida sea 1, el jugador se esta moviendo de forma horizontal hacia la derecha ...
                        playerSprite.flipX = false; // ... Asi que invierte la orientacion del grafico en 2D hacia la derecha
                        break; //Break away del switch de direccion  
                }
                break; //Break away del switch de orientacion 
        }
    }
}
